{
	"info": {
		"_postman_id": "c872595a-74b8-4a9b-8155-5a8a6cf7573c",
		"name": "SportyShoesApiTesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36946317"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Admin Login",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "a",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@admin.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:9292/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9292",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "List of Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the status code is 200\r",
									"pm.test(\"Status Code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check if response is in JSON format\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Check if the response body contains an array\r",
									"pm.test(\"Response contains an array of products\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Check if each product has the expected properties\r",
									"pm.test(\"Each product has id, name, and price\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((product) => {\r",
									"        pm.expect(product).to.have.property(\"id\");\r",
									"        pm.expect(product).to.have.property(\"name\");\r",
									"        pm.expect(product).to.have.property(\"price\");\r",
									"        pm.expect(product).to.have.property(\"description\");\r",
									"        pm.expect(product).to.have.property(\"quantity\");\r",
									"    });\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Product list contains a product with id 1\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const product = jsonData.find(p => p.id === 1);\r",
									"    pm.expect(product).to.not.be.undefined;\r",
									"    pm.expect(product.name).to.equal(\"Running Shoes\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "a",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@admin.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9292/api/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9292",
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "List of Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the status code is 200\r",
									"pm.test(\"Status Code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Check if response is in JSON format\r",
									"pm.test(\"Response is JSON\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// Check if the response body contains an array\r",
									"pm.test(\"Response contains an array of users\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Check if each user has the expected properties\r",
									"pm.test(\"Each user has id, email, and role\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    jsonData.forEach((user) => {\r",
									"        pm.expect(user).to.have.property(\"id\");\r",
									"        pm.expect(user).to.have.property(\"email\");\r",
									"        pm.expect(user).to.have.property(\"role\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"User list contains a user with email 'admin@admin.com'\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    const user = jsonData.find(u => u.email === \"admin@admin.com\");\r",
									"    pm.expect(user).to.not.be.undefined;\r",
									"    pm.expect(user.role).to.equal(\"ADMIN\");  // Replace with actual role value\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:9292/api/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9292",
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}